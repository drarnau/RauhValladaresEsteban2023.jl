var documenterSearchIndex = {"docs":
[{"location":"lib/internals/#Internals-Documentation","page":"Internal","title":"Internals Documentation","text":"","category":"section"},{"location":"lib/internals/#Index","page":"Internal","title":"Index","text":"","category":"section"},{"location":"lib/internals/","page":"Internal","title":"Internal","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"lib/internals/#Internals-Interface","page":"Internal","title":"Internals Interface","text":"","category":"section"},{"location":"lib/internals/","page":"Internal","title":"Internal","text":"Modules = [RauhValladaresEsteban2023]\nPublic = false\nOrder = [:function, :type]","category":"page"},{"location":"lib/internals/#RauhValladaresEsteban2023.aggregatemeans-Tuple{Vector{RauhValladaresEsteban2023.MicroData}, Vector{Float64}}","page":"Internal","title":"RauhValladaresEsteban2023.aggregatemeans","text":"aggregatemeans(v::Vector{MicroData}, w::Vector{Float64})\n\nComputes aggregate means from the vector of MicroData instances v using weights w. Returns an AggregateData instance.\n\nArguments\n\nv::Vector{MicroData}: A vector of MicroData instances containing agent/individual-level data.\nw::Vector{Float64}: A vector of weights. The length of w must be equal to the length of v.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.fh′-Tuple{Float64, Float64, Float64, RauhValladaresEsteban2023.ModelParameters}","page":"Internal","title":"RauhValladaresEsteban2023.fh′","text":"fh′(h::Float64, a::Float64, n::Float64, p::ModelParameters)::Float64\n\nReturns the value of human capital in the next period.\n\nArguments\n\nh::Float64: Human capital in the current period.\na::Float64: Ability to acumulate human capital.\nn::Float64: Hours worked.\np::ModelParameters: Instance of ModelParameters containing parameter values ϕ and δ.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.findn-Tuple{Float64, Float64, Float64, Any, RauhValladaresEsteban2023.ModelParameters}","page":"Internal","title":"RauhValladaresEsteban2023.findn","text":"findn(h::Float64, a::Float64, uᴴ::Float64, fV′, p::ModelParameters)\n\nReturns the optimal hours worked and the utility value associated to the optimal hours.\n\nArguments\n\nh::Float64: Human capital.\na::Float64: Ability to accumulate human capital.\nuᴴ::Float64: Utility of staying at home.\nfV′: Function computing the continuation value of the next period with respect to hours worked in the current period.\np::ModelParameters: Instance of ModelParameters containing parameter values β.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.fuᴴ-Tuple{Float64, Float64, Int64, RauhValladaresEsteban2023.ModelParameters}","page":"Internal","title":"RauhValladaresEsteban2023.fuᴴ","text":"fuᴴ(h::Float64, κ::Float64, j::Int64, p::ModelParameters)::Float64\n\nReturns the utility value of staying at come.\n\nArguments\n\nh::Float64: Human capital.\nκ::Float64: Realisation of the stay-at-home value shock.\nj::Int64: Age.\np::ModelParameters: Instance of ModelParameters containing parameter values ψ, γ, η, κ₀, κ₁, and κ₂.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.fuᵂ-Tuple{Float64, Float64, RauhValladaresEsteban2023.ModelParameters}","page":"Internal","title":"RauhValladaresEsteban2023.fuᵂ","text":"fuᵂ(h::Float64, n::Float64, p::ModelParameters)::Float64\n\nReturns the utility value of working.\n\nArguments\n\nh::Float64: Human capital.\nn::Float64: Hours worked.\np::ModelParameters: Instance of ModelParameters containing parameter values ω, γ, and ψ.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.gss","page":"Internal","title":"RauhValladaresEsteban2023.gss","text":"gss(f::Function, a::Float64, b::Float64, tol::Float64 = 1e-6)\n\nReturns argument that maximises value of function f over the interval [a,b] and value of function f at the maximising point using the Golden search method.\n\nArguments:\n\nf: Univariate function.\na: Lower bound.\nb: Upper bound.\ntol: Tolerance of the stopping.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#RauhValladaresEsteban2023.loadCSVinput-Tuple{String, String}","page":"Internal","title":"RauhValladaresEsteban2023.loadCSVinput","text":"loadCSVinput(inputname::String, group::String)\n\nLoads data from a CSV file located in the model_inputs folder and returns a DataFrame containing data specific to the provided group.\n\nArguments\n\ninputname::String: The relative path to the CSV file, including the file name. For example, model_inputs/parameters.csv.\ngroup::String: The name of the column in the CSV file that contains the group information. For example: Black.\n\nNotes\n\nThe function assumes that the CSV file has a header row containing column names.\nThe group column in the loaded DataFrame is converted to lowercase for consistent matching.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.loaddeciledata","page":"Internal","title":"RauhValladaresEsteban2023.loaddeciledata","text":"loaddeciledata(filename::String, group::String = \"\")\n\nLoads decile data from a predefined CSV file and returns it as a MicroData structure.\n\nArguments\n\nfilename::String: The path to the CSV file containing the decile data. Example: nlsydata/afqt_decile_1.csv.\ngroup::String: (optional) The group to which the data should be restricted. Valid values are \"Black\", \"White\", or an empty string (default).\n\nReturns\n\nA MicroData instance containing the loaded decile data.\n\nNotes\n\nThe CSV file is expected to have the following columns: \"wage\", \"hours\", \"employed\", and \"weights\" (or columns that contain these strings as substrings).\nIf group is specified, the data will be restricted to the specified group (\"Black\" or \"White\") based on the values in the \"black\" column.\n\nExamples\n\ndata = loaddeciledata(\"nlsydata/afqt_decile_1.csv\")  # Load all decile data\ndata = loaddeciledata(\"nlsydata/afqt_decile_1.csv\", \"black\")  # Load decile data for the black group only\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#RauhValladaresEsteban2023.micro2aggregate-Tuple{Any, RauhValladaresEsteban2023.MicroData}","page":"Internal","title":"RauhValladaresEsteban2023.micro2aggregate","text":"micro2aggregate(f, d::MicroData)\n\nComputes aggregate statistics from the MicroData instance d using the specified statistical function f. The function computes aggregate statistics for wage, hours, employment, total income (all individuals), and income (employed individuals).\n\nArguments\n\nf: A function that computes the desired aggregate statistic.\nd::MicroData: A MicroData instance containing agent/individual-level data.\n\nNote\n\nThe function handles missing values by replacing them with zeros for the total income variable.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.policyfunction-Tuple{Int64, RauhValladaresEsteban2023.ModelParameters}","page":"Internal","title":"RauhValladaresEsteban2023.policyfunction","text":"policyfunction(ia::Int64, p::ModelParameters)\n\nReturns the policy function for optimal labor supply decisions.\n\nArguments\n\nia::Int64: Index of the ability to accumulate human capital.\np::ModelParameters: Instance of ModelParameters containing relevant model parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.raw2micro-Tuple{RauhValladaresEsteban2023.ModelParameters}","page":"Internal","title":"RauhValladaresEsteban2023.raw2micro","text":"raw2micro(p::ModelParameters; hours::Matrix{Float64}, hk::Matrix{Float64}, empsample::Bool = true)\n\nConverts simulation results of hours worked and human capital to MicroData format optionally applying constraints that allow comparison to NLSY data.\n\nArguments\n\np::ModelParameters: Instance of ModelParameters containing relevant parameter values.\nhours::Matrix{Float64}: Matrix of simulated hours worked.\nhk::Matrix{Float64}: Matrix of simulated human capital.\nempsample::Bool = true: (Optional) Flag indicating whether to use treshold to allocate employment indicator.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.simulate","page":"Internal","title":"RauhValladaresEsteban2023.simulate","text":"simulate(ia::Int64, iκs::Matrix{Int64}, n::Vector{Matrix{Float64}}, p::ModelParameters, empsample::Bool = true)\n\nReturns MicroData instance after simulating economy based on the realisations of the staying-at-home shock (iκs) and the policy function (n) for one level of ability to accumulate human capital.\n\nArguments\n\nia::Int64: Index of the ability to accumulate human capital.\niκs::Matrix{Int64}: Matrix of the indices of realisations of the staying-at-home shock.\nn::Vector{Matrix{Float64}}: Policy function for hours worked.\np::ModelParameters: Instance of ModelParameters containing relevant parameter values.\nempsample::Bool = true: Flag indicating whether to use treshold to allocate employment indicator.\n\n\n\n\n\n","category":"function"},{"location":"lib/internals/#RauhValladaresEsteban2023.simulateindices-Tuple{QuantEcon.MarkovChain, Int64, Int64}","page":"Internal","title":"RauhValladaresEsteban2023.simulateindices","text":"simulateindices(MC::MarkovChain, nagents::Int64, nperiods::Int64; t₀::Int64 = 100)::Matrix{Int64}\n\nSimulates indices for a given number of agents and periods using a Markov chain.\n\nArguments\n\nMC::MarkovChain: MarkovChain instance.\nnagents::Int64: Number of agents.\nnperiods::Int64: Number of periods to simulate.\nt₀::Int64 (optional): Amount of periods ignored when returning simulation (default: 100).\n\nNote\n\nThe final matrix of simulated indices is returned, starting from period t₀ + 1.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.simulateraw-Tuple{Int64, Matrix{Int64}, Vector{Matrix{Float64}}, RauhValladaresEsteban2023.ModelParameters}","page":"Internal","title":"RauhValladaresEsteban2023.simulateraw","text":"simulateraw(ia::Int64, iκs::Matrix{Int64}, n::Vector{Matrix{Float64}}, p::ModelParameters)\n\nSimulates hours worked and human capital based on realisations of the staying-at-home shock (iκs) and the policy function (n) for one level of ability to accumulate human capital.\n\nArguments\n\nia::Int64: Index of the ability to accumulate human capital.\niκs::Matrix{Int64}: Matrix of the indices of realisations of the staying-at-home shock.\nn::Vector{Matrix{Float64}}: Policy function for hours worked.\np::ModelParameters: Instance of ModelParameters containing model relevant parameter values.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.statsf-Tuple{Any, Matrix, Matrix}","page":"Internal","title":"RauhValladaresEsteban2023.statsf","text":"statsf(f, y::Matrix, w::Matrix)\n\nApplies the statistical function f to a matrix y weighted by corresponding elements in the matrix w, after skipping missing values.\n\nArguments\n\nf: A statistical function to apply to the matrix y weighted by w.\ny::Matrix: A matrix containing the data for which the statistic will be calculated.\nw::Matrix: A matrix containing the weights to be applied to each element of y. The size of w should match the size of y.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.statsf-Tuple{Any, Matrix}","page":"Internal","title":"RauhValladaresEsteban2023.statsf","text":"statsf(f, y::Matrix)\n\nApplies the statistical function f to the matrix y, skipping missing values.\n\nArguments\n\nf: A statistical function to apply to the matrix y.\ny::Matrix: A matrix containing the data for which the statistic will be calculated.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#RauhValladaresEsteban2023.AgeData","page":"Internal","title":"RauhValladaresEsteban2023.AgeData","text":"AgeData\n\nA composite type that represents a summary statistic by age for hourly wages, hours worked, and employment status. For example, average wages by age.\n\nFields\n\nwage::Vector{Float64}: Hourly wage.\nhours::Vector{Float64}: Hours worked.\nemployed::Vector{Float64}: Employment status.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/#RauhValladaresEsteban2023.MicroData","page":"Internal","title":"RauhValladaresEsteban2023.MicroData","text":"MicroData\n\nA composite type that represents individual-level data on wages, hours worked, employment status, and individual population weights. Each row corresponds to an agent/individual, and each column represents a period.\n\nFields\n\nwage::Matrix{Union{Missing, Float64}}: Hourly wage.\nhours::Matrix{Union{Missing, Float64}}: Hours worked.\nemployed::Matrix{Union{Missing, Bool}}: Employment indicator.\nweights::Matrix{Union{Missing, Int64}}: Individual frequency weights.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/#RauhValladaresEsteban2023.ModelParameters","page":"Internal","title":"RauhValladaresEsteban2023.ModelParameters","text":"ModelParameters\n\nComposite type that contains all the parameters that describe a model economy.\n\nFields\n\nPrices\n\nr::Float64: Interest rate.\nω::Float64: Wage rate.\n\nHuman capital function parameters\n\nϕ::Float64: Curvature with respect to hours worked.\nδ::Float64: Depreciation.\n\nPreferences\n\nβ::Float64: Discount rate.\nψ::Float64: Weight of leisure in utility function.\nγ::Float64: Curvature of leisure in utility function.\nκ₀::Float64: Intercept value staying at home.\nκ₁::Float64: Slope value staying at home.\nκ₂::Float64: Curvature value staying at home.\nη::Float64: Curvature of human capital in value staying at home.\nρ_κ::Float64: Persistance value staying at home.\nσ_κ::Float64: Standard deviation value staying at home.\n\nModel size\n\ngp_h::Int64: Grid points human capital policy funtion.\ngp_κ::Int64. Grid points value staying at home.\nJ::Int64: Number of periods.\nnagents::Int64: Number of agents in Monte Carlo per ability level.\nnlevels::Int64: umber of ability levels.\n\nGrids & Markov Chains\n\ngrid_a::Vector{Float64}: Grid ability.\ngrid_h₁::Vector{Float64}: Grid initial human capital.\ngrids_h::Array{Vector{Float64}, 2}: Array of grids of human capital.\ngrid_κ::Vector{Float64}: Grid stochastic value staying at home.\nMCκ::MarkovChain: Markov Chain utility staying at home.\nP_κ::Array{Float64,2}: Transition probabilities utility staying at home.\n\nConversion/comparison to real data\n\npopshare::Vector{Float64}: Population shares; weight of each AFQT decile.\nlbhours::Float64: Lower bound hours worked for being employed.\ninitialage::Int64: Real age at model/data entry.\nagerange::UnitRange{Int64}: Range of ages in model/data.\n\n\n\n\n\n","category":"type"},{"location":"model/#Model","page":"Model","title":"Model","text":"","category":"section"},{"location":"model/","page":"Model","title":"Model","text":"Utility-maximizing agents live for j=1dotsJ discrete periods. The value of being alive in period J+1 is normalized to zero. Generally speaking, parameters associated with human capital accumulation are universal, while preference parameters are race specific and indexed by r in  textBlack White .","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"Upon entering the model, each agent draws a realization of their initial level of human capital (h_1) and permanent ability level (a). Ability plays a crucial role in determining an agent's proficiency in accumulating human capital (h): low-ability agents accumulate less human capital per hour worked.","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"Each period, agents are endowed with one unit of time, which they can distribute between staying at home or working. The utility of working agents (u^W) is given by:","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"  u^W(hn) = omega cdot h cdot n + psi^r cdot h cdot frac(1-n)^1-gamma^r1-gamma^rtext","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"where omega is the exogenous wage rate, h is the level of human capital, n is the fraction of available hours that the agent works, psi^r is the weight of leisure in the utility function, and gamma^r determines the curvature of the utility of leisure. We define the utility of staying at home (u_j^H) in terms of age j as:","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"beginaligned\n  u_j^H(h kappa) =\n  fracpsi^r1-gamma^r cdot h^eta^r cdot e^(kappa_0^r + kappa_1^r cdot j + kappa_2^r cdot j^2 +  kappa)text \n  kappa sim N(0 1)text\nendaligned","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"where eta^r determines the curvature, which could be interpreted as efficiency in the production of stay-at-home utility. kappa_0^r, kappa_1^r, and kappa_2^r are the age-dependent deterministic components, and kappa is the realization of an i.i.d. shock with mean zero and a normalized standard deviation equal to 1 drawn every period. We use a polynomial of degree two in age to replicate the shape of the employment rate we observe in the data. The fact that the utility of staying at home depends on age can be interpreted as proxying factors that affect labor supply and change over the lifecycle, such as household composition, health, or networks.","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"We express the problem solved by the agents in recursive form and indicate any value associated with the subsequent period by marking it with a prime. Let us denote the value of staying at home as H_j(hkappa a), the value of working as W_j(hkappa a), and the decision to work or stay at home as:","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"  V_j(hkappa a) = max W_j(hkappa a) H_j(hkappa a)text","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"The value of staying at home is given by:","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"beginaligned\n  H_j(hkappa a) = quad  u_j^H(hkappa) + beta mathbbE_kappa V_j+1(hkappaa)text \n  textst quad  h = (1-delta)h text\nendaligned","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"where beta is the discount factor. The value of working is given by:","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"beginaligned\n  W_j(hkappa a) = max_hn quad  u^W(hn) + beta mathbbE_kappa V_j+1(hkappaa)text \n  textst quad  h = (1-delta)h + a n^phi text \n  quad  0 leq n leq 1text\nendaligned","category":"page"},{"location":"model/","page":"Model","title":"Model","text":"The function h defines how human capital evolves over the lifecycle. The parameter phi defines the curvature of human capital next period with respect to time spent working. We assume that human capital depreciates at a constant rate delta. We model human capital accumulation as a learning-by-doing technology. The labor supply decision trades off less leisure today versus more income today and higher human capital in the future.","category":"page"},{"location":"lib/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/#Index","page":"Public","title":"Index","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Public-Interface","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Modules = [RauhValladaresEsteban2023]\nPrivate = false\nOrder = [:function, :type]","category":"page"},{"location":"lib/public/#RauhValladaresEsteban2023.catmicrodata-Tuple{Vector, Vector{RauhValladaresEsteban2023.MicroData}}","page":"Public","title":"RauhValladaresEsteban2023.catmicrodata","text":"catmicrodata(grps::Vector, v::Vector{MicroData})\n\nConcatenates multiple MicroData instances based on groupings provided in grps.\n\nArguments\n\ngrps::Vector: Vector of groupings, where each element is a single index (an Int64) or a range of indices (UnitRange{Int64}). The indices correspond to the positions of MicroData instances in the input vector v.\nv::Vector{MicroData}: Vector of MicroData instances to be concatenated.\n\nNotes\n\nThe length of the grps vector must be less than or equal to the length of the v vector.\nEach element in grps specifies a grouping of MicroData instances to be concatenated together.\nThe output vector z has the same length as the grps vector.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.catmicrodata-Tuple{Vector{RauhValladaresEsteban2023.MicroData}}","page":"Public","title":"RauhValladaresEsteban2023.catmicrodata","text":"catmicrodata(v::Vector{MicroData})\n\nConcatenates multiple instances of MicroData structures stored in vector (v) and returns a new MicroData instance with the concatenated data.\n\nArguments\n\nv::Vector{MicroData}: A vector of MicroData instances to be concatenated.\n\nNotes\n\nThe function assumes that all MicroData instances in the input vector have the same structure.\nThe concatenation is performed by vertically stacking the corresponding fields of each MicroData instance.\nThe resulting MicroData instance will have the same field names as the input instances.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.gap-Tuple{AggregateData, AggregateData}","page":"Public","title":"RauhValladaresEsteban2023.gap","text":"gap(b::AggregateData, w::AggregateData)\n\nCalculates the gap between two AggregateData instances b and w for each corresponding field.\n\nArguments\n\nb::AggregateData: The numerator AggregateData instance.\nw::AggregateData: The denominator AggregateData instance.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.gap-Tuple{Float64, Float64}","page":"Public","title":"RauhValladaresEsteban2023.gap","text":"gap(b::Float64, w::Float64)\n\nCalculates the gap between the two values b and w as 1 - fracbw.\n\nArguments\n\nb::Float64: The numerator value.\nw::Float64: The denominator value.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.generateparameters-Tuple{String}","page":"Public","title":"RauhValladaresEsteban2023.generateparameters","text":"generateparameters(group::String)\n\nGenerates an instance of ModelParameters by loading and processing input data specific to the provided group.\n\nArguments\n\ngroup::String: The name of the predefined group. Valid options are 'Black' or 'White'.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.groupingmean-Tuple{Vector, Vector{RauhValladaresEsteban2023.AgeData}, RauhValladaresEsteban2023.ModelParameters}","page":"Public","title":"RauhValladaresEsteban2023.groupingmean","text":"groupingmean(grps::Vector, v::Vector{AgeData}, p::ModelParameters)\n\nComputes the weighted mean of each field in the vector of AgeData instances v for specific groupings defined by the indices in grps, using the popshare field from the ModelParameters object p as weights.\n\nArguments\n\ngrps::Vector: Vector of groupings, where each element is a single index (an Int64) or a range of indices (UnitRange{Int64}). The indices correspond to the positions of MicroData instances in the input vector v.\nv::Vector{AgeData}: A vector of AgeData instances.\np::ModelParameters: A ModelParameters instance.\n\nNotes\n\nThe length of the grps vector must be less than or equal to the length of the v vector.\nEach element in grps specifies a grouping of MicroData instances to be concatenated together.\nThe output vector z has the same length as the grps vector.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.groupingmean-Tuple{Vector{RauhValladaresEsteban2023.AgeData}, Vector{Float64}}","page":"Public","title":"RauhValladaresEsteban2023.groupingmean","text":"groupingmean(m::Vector{AgeData}, w::Vector{Float64})\n\nComputes the weighted mean of each field in the vector of AgeData instnaces m using the corresponding weights in the vector w.\n\nArguments\n\nm::Vector{AgeData}: A vector of AgeData instances.\nw::Vector{Float64}: A vector of weights. The length of w must be equal to the length of m.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.latexcf-Tuple{Dict{String, AggregateData}}","page":"Public","title":"RauhValladaresEsteban2023.latexcf","text":"latexcf(gaps::Dict{String, AggregateData})\n\nGenerates a LaTeX table with counterfactual results based on the provided gaps dictionary.\n\nArguments\n\ngaps::Dict{String, AggregateData}: Dictionary containing counterfactual results for different scenarios. The keys are scenario names, and the values are AggregateData instances representing the gaps.\n\nNote\n\nThis function generates a LaTeX document and saves it as a file named \"counterfactuals.tex\" in the \"tables\" directory. The LaTeX document contains a table displaying the counterfactual results.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.loadnlsydata","page":"Public","title":"RauhValladaresEsteban2023.loadnlsydata","text":"loadnlsydata(group::String = \"\")\n\nLoads NLSY (National Longitudinal Survey of Youth) data from the nlsy_data folder and returns it as an vector of MicroData.\n\nArguments\n\ngroup::String: (optional) The group to which the data should be restricted. Valid values are \"Black\", \"White\", or an empty string (default).\n\nNotes\n\nThe function reads all files in the nlsy_data folder and assumes that each file contains AFQT decile data in the expected format.\nIf group is specified, the data will be restricted to the specified group (\"black\" or \"white\") for each file.\n\nExamples\n\ndata = loadnlsydata()  # Load NLSY data for all groups\ndata = loadnlsydata(\"black\")  # Load NLSY data for the black group only\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#RauhValladaresEsteban2023.meangap-Tuple{Vector{RauhValladaresEsteban2023.MicroData}, Vector{Float64}, Vector{RauhValladaresEsteban2023.MicroData}, Vector{Float64}}","page":"Public","title":"RauhValladaresEsteban2023.meangap","text":"meangap(b::Vector{MicroData}, wb::Vector{Float64}, w::Vector{MicroData}, ww::Vector{Float64})\n\nCalculates the mean gap between the two vectors of MicroData instances, b and w, weighted by the corresponding weight vectors wb and ww.\n\nArguments\n\nb::Vector{MicroData}: The numerator vector of MicroData instances.\nwb::Vector{Float64}: The weight vector corresponding to the numerator vector.\nw::Vector{MicroData}: The denominator vector of MicroData instances.\nww::Vector{Float64}: The weight vector corresponding to the denominator vector.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.modifyparameters-Tuple{RauhValladaresEsteban2023.ModelParameters}","page":"Public","title":"RauhValladaresEsteban2023.modifyparameters","text":"modifyparameters(p::ModelParameters; np...)\n\nCreates a new instance of ModelParameters by modifying the specified fields while copying the remaining fields from the input p.\n\nArguments:\n\np::ModelParameters: The original instance of ModelParameters.\nnp...: Keyword arguments representing the fields of ModelParameters to be modified along with their desired values. Example: ψ = 1.0, γ = 2.0.\n\nNote\n\nThe function assumes that the specified keyword arguments correspond to the fields of ModelParameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.modifyparameters-Tuple{String}","page":"Public","title":"RauhValladaresEsteban2023.modifyparameters","text":"modifyparameters(group::String; np...)\n\nCreates a new instance of ModelParameters by modifying the fields specified in np... while copying the remaining fields from the generateparameters(group) function.\n\nArguments\n\ngroup::String: The name of the predefined group. It can be either \"Black\" or \"White\".\nnp...: Keyword arguments representing the fields of ModelParameters with their desired values. Example: ψ = 1.0, γ = 2.0.\n\nNote\n\nThe function assumes that the specified keyword arguments correspond to the fields of ModelParameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.plotmvsd-Tuple{Symbol, Vector{RauhValladaresEsteban2023.AgeData}, Vector{RauhValladaresEsteban2023.AgeData}}","page":"Public","title":"RauhValladaresEsteban2023.plotmvsd","text":"plotmvsd(\n    fn::Symbol,\n    m::Vector{AgeData},\n    d::Vector{AgeData};\n    de::Union{Vector{AgeData}, Nothing} = nothing,\n    plt_ttl::String = \"\",\n    lyt = (1, 5),\n    sz = (2000, 500),\n    mrgn = (50, :px),\n    ylms = (0, NaN),\n    haxis = 1:length(d),\n    spttls = fill(\"\", length(d)),\n    mlbl = \"Model\",\n    dlbl = \"Data\",\n    xlbl = \"Age\",\n    flllph = 0.1,\n    zα = 1.96\n    )\n\nPlots multiple subplots the model simulated data and real data with error bars representing the standard error.\n\nArguments\n\nfn::Symbol: Field name to plot from AgeData instances.\nm::Vector{AgeData}: Vector of AgeData structures of model simulated data.\nd::Vector{AgeData}: Vector of AgeData structures of real data.\nde::Union{Vector{AgeData}, Nothing} = nothing: Optional vector of AgeData instances representing standard errors for the data. If not provided (default), error bars will not be shown.\nplt_ttl::String = \"\": Optional title for the overall plot.\nlyt::Tuple{Int64, Int64} = (1, 5): Layout of subplots in rows and columns.\nsz::Tuple{Int64, Int64} = (2000, 500): Size of the overall plot.\nmrgn::Tuple{Int64, Symbol} = (50, :px): Margin size and unit for the overall plot.\nylms::Tuple{Float64, Float64} = (0, NaN): Y-axis limits for the overall plot.\nhaxis: Horizontal axis values for each subplot. Defaults to 1:length(d).\nspttls::Vector{String} = fill(\"\", length(d)): Titles for each subplot. Defaults to an empty string for each subplot.\nmlbl::String = \"Model\": Label for the model predictions in the legend.\ndlbl::String = \"Data\": Label for the data in the legend.\nxlbl::String = \"Age\": Label for the x-axis.\nflllph::Float64 = 0.1: Fill alpha value for the error bars. Defaults to 0.1.\nzα::Float64 = 1.96: Z-value corresponding to the desired level of confidence for the error bars. Defaults to 1.96, representing the 95% confidence level.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.plotmvsd-Tuple{Vector{Float64}, Vector{Float64}}","page":"Public","title":"RauhValladaresEsteban2023.plotmvsd","text":"plotmvsd(\n    m::Vector{Float64},\n    d::Vector{Float64};\n    de::Union{Vector{Float64}, Nothing} = nothing,\n    haxis = 1:length(d),\n    ttl = \"\",\n    mlbl = \"Model\",\n    dlbl = \"Data\",\n    xlbl = \"Age\",\n    flllph = 0.1,\n    zα = 1.96\n    )\n\nPlots the model simulated data and real data with error bars representing the standard error.\n\nArguments\n\nm::Vector{Float64}: Model simulated data.\nd::Vector{Float64}: Real data.\nde::Union{Vector{Float64}, Nothing} = nothing: Optional vector of standard errors for the data. If not provided (default), error bars will not be shown.\nhaxis: Horizontal axis values for the plot. Defaults to 1:length(d).\nttl::String = \"\": Optional title for the plot.\nmlbl::String = \"Model\": Label for the model predictions in the legend.\ndlbl::String = \"Data\": Label for the data in the legend.\nxlbl::String = \"Age\": Label for the x-axis.\nflllph::Float64 = 0.1: Fill alpha value for the error bars. Defaults to 0.1.\nzα::Float64 = 1.96: Z-value corresponding to the desired level of confidence for the error bars. Defaults to 1.96, representing the 95% confidence level.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.simulatewages-Tuple{Matrix, Float64, Float64, RauhValladaresEsteban2023.ModelParameters}","page":"Public","title":"RauhValladaresEsteban2023.simulatewages","text":"simulatewages(hours::Matrix, a::Float64, h₁::Float64, p::ModelParameters)\n\nSimulates wages based on hours worked, the ability to accumulate human capital, and the initial level of human capital.\n\nArguments\n\nhours::Matrix: Matrix containing hours worked by agents (rows) for each period (columns).\na::Float64: Ability to accumulate human capital.\nh₁::Float64: Initial level of human capital.\np::ModelParameters: Instance of ModelParameters containing relevant model parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.simulatewages-Tuple{Vector{RauhValladaresEsteban2023.MicroData}, RauhValladaresEsteban2023.ModelParameters}","page":"Public","title":"RauhValladaresEsteban2023.simulatewages","text":"simulatewages(v::Vector{MicroData}, p::ModelParameters)\n\nSimulates wages for each level of ability and initial human capital.\n\nArguments\n\nv::Vector{MicroData}: Vector of MicroData containing amount of hours worked.\np::ModelParameters: Instance of ModelParameters containing relevant model parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.solveconstantls-Tuple{RauhValladaresEsteban2023.ModelParameters, RauhValladaresEsteban2023.ModelParameters}","page":"Public","title":"RauhValladaresEsteban2023.solveconstantls","text":"solveconstantls(pb::ModelParameters, pw::ModelParameters)\n\nSolves the model using the labor supply decisions of the economy defined by pb while using the human capital parameters of pw.\n\nArguments\n\npb::ModelParameters: Instance of ModelParameters to compute labor supply decisions.\npw::ModelParameters: Instance of ModelParameters to use human capital parameters.\n\nNote\n\nThis function returns a vector of simulated data for each level of ability/h₁. Each element in the vector represents the simulated data for one level and is of type MicroData.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.solvemodel","page":"Public","title":"RauhValladaresEsteban2023.solvemodel","text":"solvemodel(p::ModelParameters, empsample::Bool = true)\n\nSolves the model based on the parameters provided.\n\nArguments\n\np::ModelParameters: Instance of ModelParameters containing the model's parameter values.\nempsample::Bool = true: (Optional) Flag indicating whether to use treshold to allocate employment indicator.\n\nNote\n\nThis function returns a vector of simulated data for each level of ability/h₁. Each element in the vector represents the simulated data for one level and is of type MicroData.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#RauhValladaresEsteban2023.statsfbyage-Tuple{Any, Matrix, Matrix}","page":"Public","title":"RauhValladaresEsteban2023.statsfbyage","text":"statsfbyage(f, y::Matrix, w::Matrix)\n\nApplies the statistical function f to each column of the matrix y weighted by corresponding elements in the matrix w, skipping missing values.\n\nArguments\n\nf: A statistical function to apply to each column of the matrix y weighted by w.\ny::Matrix: A matrix containing the data for which the statistic will be calculated.\nw::Matrix: A matrix containing the weights to be applied to each element of y. The size of w should match the size of y.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.statsfbyage-Tuple{Any, Matrix}","page":"Public","title":"RauhValladaresEsteban2023.statsfbyage","text":"statsfbyage(f, y::Matrix)\n\nApplies the statistical function f to each column of the matrix y, treating missing values as skipped.\n\nArguments\n\nf: A statistical function to apply to each column of y.\ny::Matrix: A matrix containing the data for which the statistics will be calculated.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.statsfbyage-Tuple{Any, RauhValladaresEsteban2023.MicroData}","page":"Public","title":"RauhValladaresEsteban2023.statsfbyage","text":"statsfbyage(f, d::MicroData)\n\nApplies the statistical function f to each column of the wage, hours, and employed fields in the MicroData instance d weighted by the corresponding elements in the weights field, after skipping missing values.\n\nArguments\n\nf: A statistical function to apply to each column of the fields in d.\nd::MicroData: A MicroData object containing wage, hours, employed, and weights fields.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.sterror-Tuple{AbstractVector{<:Real}, StatsBase.AbstractWeights}","page":"Public","title":"RauhValladaresEsteban2023.sterror","text":"sterror(v::AbstractVector{<:Real}, w::AbstractWeights)\n\nCalculates the standard error of a weighted sample vector v using the provided weights w.\n\nArguments\n\nv::AbstractVector{<:Real}: A vector of real values representing the sample data.\nw::AbstractWeights: An abstract type representing the weights associated with each data point in v.\n\nNotes\n\nThe weights w must have the same length as the vector v.\nThe standard error is calculated as the standard deviation of v weighted by w, divided by the square root of the sample size (length(w)).\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#RauhValladaresEsteban2023.AggregateData","page":"Public","title":"RauhValladaresEsteban2023.AggregateData","text":"AggregateData\n\nComposite type that contains a summary statistic for hourly wages among the employed, hours worked among the employed, employment rate, income among all, and income among the employed. For example, average wages.\n\nFields\n\nwage::Float64: Average wage among the employed.\nhours::Float64: Hours worked among the employed.\nemployment::Float64: Employment rate.\nincomeall::Float64: Average income among all.\nincomeemp::Float64: Average income among the employed.\n\n\n\n\n\n","category":"type"},{"location":"#RauhValladaresEsteban2023.jl","page":"Home","title":"RauhValladaresEsteban2023.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package solves the on-the-job human capital accumulation model with heterogeneity in the initial human capital endowment and the lifelong ability to accumulate human capital, and endogenous labor supply at the extensive and intensive margins in On the Black-White Gaps in Labor Supply and Earnings over the Lifecycle in the US by Christopher Rauh and Arnau Valladares-Esteban.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In Model, we provide the equations that describe the model that this package solves. All the functions and types used in the package are documented in the Library: public and internal functionality.","category":"page"}]
}
